buildscript {
	repositories {
		mavenRepo urls: "http://gradle.artifactoryonline.com/gradle/plugins"
	}
	dependencies {
		classpath "org.gradle.plugins:gradle-idea-plugin:0.2"
	}
}

dependsOnChildren()

allprojects {
	grailsVersion = "1.2.3"
	spockDependency = "org.spockframework:spock-core:0.5-groovy-1.6-SNAPSHOT"
	seleniumDependency = "org.seleniumhq.selenium:selenium:2.0a5"
	jettyDependency = "org.mortbay.jetty:jetty:6.1.21"
	groovyDependency = "org.codehaus.groovy:groovy-all:1.6.7"
	
	repositories {
		mavenCentral()
		mavenRepo name: "spock-snapshots", urls: ["http://m2repo.spockframework.org/snapshots"]
	}
}

def groovyModules = [":core", ":test-utils", ":grails:jar", ":runners:spock", ":runners:junit3"]
def publishedModules = [":core", ":grails:jar", ":runners:spock", ":runners:junit3"]
if (hasProperty("withSamples")) {
	groovyModules << "google"
}

subprojects {
	version = '0.4-SNAPSHOT'
	group = 'org.codehaus.geb'
	
	apply plugin: "org.gradle.idea"
		
	if (project.path in groovyModules) {
		apply plugin: "groovy"
		if (project.path != ":test-utils") {
			apply from: "file:${rootDir}/clover.gradle"
		}
		
		dependencies {
			groovy groovyDependency
		}
		
		compileGroovy.options.fork = false
		compileTestGroovy.options.fork = false
		
		if (project.hasProperty('t')) {
			test.doFirst {
				test.include "**/${t}*.class"
			}
		}
		
		test.ignoreFailures = true

		sourceCompatibility = 1.5
		targetCompatibility = 1.5
		
		configurations {
			compile.transitive = true
			testCompile.transitive = true
		}
		
	}
	
	if (project.path in publishedModules) {
		apply plugin: 'maven'
		
		configurations {
			deployerJars
		}
		
		dependencies {
			deployerJars "org.apache.maven.wagon:wagon-webdav-jackrabbit:1.0-beta-6"
		}
		
		if (hasProperty('codehausUsername') && hasProperty('codehausPassword')) {
			uploadArchives {
				repositories.mavenDeployer {
					configuration = configurations.deployerJars
					repository(url: "dav:https://dav.codehaus.org/repository/geb/") {
						authentication(userName: codehausUsername, password: codehausPassword)
					}
					snapshotRepository(url: "dav:https://dav.codehaus.org/snapshots.repository/geb/") {
						authentication(userName: codehausUsername, password: codehausPassword)
					}
					pom.project {
						licenses {
							license {
								name 'The Apache Software License, Version 2.0'
								url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
								distribution 'repo'
							}
						}
					}
				}
			}
		}
	}
	
	// Must be set after applying groovy/maven plugins
	archivesBaseName = "geb-${project.name}"
}

project(':core') {
	dependencies {
		compile "org.seleniumhq.selenium:selenium:2.0a5" // this pulls in all the drivers, need to stop that
		testCompile spockDependency
		testCompile seleniumDependency
		testCompile jettyDependency
		testCompile project(":test-utils")
		testCompile project(":runners:spock")
	}
}

project(':runners:spock') {
	dependencies {
		compile spockDependency
		compile seleniumDependency
		compile project(':core')
		testCompile project(":test-utils")
	}
}

project(':runners:junit3') {
	dependencies {
		compile seleniumDependency
		compile project(':core')
		compile "junit:junit:3.8.2"
		testCompile project(":test-utils")
	}
}

project(':test-utils') {
	dependencies {
		compile jettyDependency
		compile project(':runners:spock')
	}
}

if (hasProperty('withSamples')) {
	project(':samples:google') {
		dependencies {
			compile project(':runners:spock')
		}
		sourceSets {
			test {
				resources {
					fileTree('src/test/resources').include('**/*.groovy')
				}
			}
		}
	}
}

project(":grails:jar") {
	archivesBaseName = "geb-grails"

	dependencies {
		groovy groovyDependency
		compile project(':runners:spock'),
		        project(":runners:junit3"),
		        "org.grails:grails-core:${grailsVersion}",
		        "org.grails:grails-test:${grailsVersion}",
		        "org.grails:grails-web:${grailsVersion}",
		        "org.slf4j:slf4j-log4j12:1.5.5"
	}
}

project(":grails:plugin") {
	buildscript {
		repositories {
			mavenCentral()
			mavenRepo name: "codehaus-snapshots", urls: 'http://snapshots.repository.codehaus.org'
			mavenRepo name: "java.net", urls: 'http://download.java.net/maven/2'
		}
	}

	apply plugin: "grails"

	repositories {
		flatDir dirs: "lib"
	}

	configurations {
		compile.exclude module: "commons-logging"
		compile.exclude module: 'xml-apis'
	}

	dependencies {
		compile project(':grails:jar'),
		        "org.grails:grails-crud:${grailsVersion}",
		        "org.grails:grails-gorm:${grailsVersion}"

		runtime "org.slf4j:slf4j-log4j12:1.5.5",
		        "hsqldb:hsqldb:1.8.0.5",
		        "net.sf.ehcache:ehcache-core:1.7.1",
		        "org.aspectj:aspectjrt:1.6.6"
	}
	
	System.setProperty("server.port", "8010")
}

// Root Project 

configurations {
	build
}

dependencies {
	build "com.cenqua.clover:clover:3.0.2"
	build "org.apache.ant:ant-junit:1.8.1@jar"
	build "org.apache.ant:ant-nodeps:1.8.1@jar"
}

task test(dependsOn: getTasksByName("test", true)) << {
	def reportsDir = "${buildDir}/reports"
	
	// Aggregate the test results
	ant.taskdef(
		name: 'junitreport2', 
		classname: "org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator",
		classpath: configurations.build.asPath
	)
	
	def testReportsDir = new File("${reportsDir}/tests")
	if (testReportsDir.exists()) {
		testReportsDir.deleteDir()
	}
	testReportsDir.mkdirs()
	
	ant.junitreport2(todir: testReportsDir) {
		subprojects.each {
			def testResultsDir = "${it.buildDir}/test-results"
			if (new File(testResultsDir).exists()) {
				fileset(dir: testResultsDir) {
					include(name: "TEST-*.xml")
				}
			}
		}
		report(todir: testReportsDir)
	}
	
	// Aggregate the coverage results
	if (project.hasProperty("withClover")) {
		def db = "clover/clover.db"
		def mergedDb = "${buildDir}/${db}"
		def cloverReportsDir = "${reportsDir}/clover"
		ant.taskdef(resource: "cloverlib.xml", classpath: configurations.build.asPath)
		ant."clover-merge"(initstring: mergedDb) {
			subprojects.each {
				def projectCloverDb = "${it.buildDir}/${db}"
				if (new File(projectCloverDb).exists()) {
					cloverdb(initstring: projectCloverDb)
				}
			}
		}
		ant."clover-report"(initstring: mergedDb) {
			current(outfile:"${cloverReportsDir}/clover.xml")
		}
		ant."clover-html-report"(initstring: mergedDb, outdir:"${cloverReportsDir}/html")
	}
}
